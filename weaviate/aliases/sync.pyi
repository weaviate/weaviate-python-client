from typing import Dict, Optional

from weaviate.aliases.alias import AliasReturn
from weaviate.connect.v4 import ConnectionSync

from .executor import _AliasExecutor

class _Alias(_AliasExecutor[ConnectionSync]):
    def list_all(self, *, collection: Optional[str] = None) -> Dict[str, AliasReturn]: ...
    def get(self, *, alias_name: str) -> Optional[AliasReturn]: ...
    def create(self, *, alias_name: str, target_collection: str) -> None: ...
    def delete(self, *, alias_name: str) -> bool: ...
    def update(self, *, alias_name: str, new_target_collection: str) -> bool: ...
