from typing import Optional, Sequence

from weaviate.collections.tenants.types import (
    TenantCreateInputType,
    TenantInputType,
    TenantOutputType,
    TenantUpdateInputType,
)
from weaviate.connect.v4 import ConnectionSync

from .executor import _TenantsExecutor

class _Tenants(_TenantsExecutor[ConnectionSync]):
    def create(self, tenants: TenantCreateInputType | Sequence[TenantCreateInputType]) -> None: ...
    def remove(self, tenants: TenantInputType | Sequence[TenantInputType]) -> None: ...
    def get(self) -> dict[str, TenantOutputType]: ...
    def get_by_names(self, tenants: Sequence[TenantInputType]) -> dict[str, TenantOutputType]: ...
    def get_by_name(self, tenant: TenantInputType) -> Optional[TenantOutputType]: ...
    def update(self, tenants: TenantUpdateInputType | Sequence[TenantUpdateInputType]) -> None: ...
    def exists(self, tenant: TenantInputType) -> bool: ...
    def activate(self, tenant: TenantInputType | Sequence[TenantInputType]) -> None: ...
    def deactivate(self, tenant: TenantInputType | Sequence[TenantInputType]) -> None: ...
    def offload(self, tenant: TenantInputType | Sequence[TenantInputType]) -> None: ...
