# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from weaviate.proto.v1.v6300.v1 import file_replication_pb2 as v1_dot_file__replication__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in v1/file_replication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FileReplicationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PauseFileActivity = channel.unary_unary(
                '/weaviate.v1.FileReplicationService/PauseFileActivity',
                request_serializer=v1_dot_file__replication__pb2.PauseFileActivityRequest.SerializeToString,
                response_deserializer=v1_dot_file__replication__pb2.PauseFileActivityResponse.FromString,
                _registered_method=True)
        self.ResumeFileActivity = channel.unary_unary(
                '/weaviate.v1.FileReplicationService/ResumeFileActivity',
                request_serializer=v1_dot_file__replication__pb2.ResumeFileActivityRequest.SerializeToString,
                response_deserializer=v1_dot_file__replication__pb2.ResumeFileActivityResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/weaviate.v1.FileReplicationService/ListFiles',
                request_serializer=v1_dot_file__replication__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=v1_dot_file__replication__pb2.ListFilesResponse.FromString,
                _registered_method=True)
        self.GetFileMetadata = channel.stream_stream(
                '/weaviate.v1.FileReplicationService/GetFileMetadata',
                request_serializer=v1_dot_file__replication__pb2.GetFileMetadataRequest.SerializeToString,
                response_deserializer=v1_dot_file__replication__pb2.FileMetadata.FromString,
                _registered_method=True)
        self.GetFile = channel.stream_stream(
                '/weaviate.v1.FileReplicationService/GetFile',
                request_serializer=v1_dot_file__replication__pb2.GetFileRequest.SerializeToString,
                response_deserializer=v1_dot_file__replication__pb2.FileChunk.FromString,
                _registered_method=True)


class FileReplicationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PauseFileActivity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeFileActivity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileMetadata(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PauseFileActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseFileActivity,
                    request_deserializer=v1_dot_file__replication__pb2.PauseFileActivityRequest.FromString,
                    response_serializer=v1_dot_file__replication__pb2.PauseFileActivityResponse.SerializeToString,
            ),
            'ResumeFileActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeFileActivity,
                    request_deserializer=v1_dot_file__replication__pb2.ResumeFileActivityRequest.FromString,
                    response_serializer=v1_dot_file__replication__pb2.ResumeFileActivityResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=v1_dot_file__replication__pb2.ListFilesRequest.FromString,
                    response_serializer=v1_dot_file__replication__pb2.ListFilesResponse.SerializeToString,
            ),
            'GetFileMetadata': grpc.stream_stream_rpc_method_handler(
                    servicer.GetFileMetadata,
                    request_deserializer=v1_dot_file__replication__pb2.GetFileMetadataRequest.FromString,
                    response_serializer=v1_dot_file__replication__pb2.FileMetadata.SerializeToString,
            ),
            'GetFile': grpc.stream_stream_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=v1_dot_file__replication__pb2.GetFileRequest.FromString,
                    response_serializer=v1_dot_file__replication__pb2.FileChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'weaviate.v1.FileReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('weaviate.v1.FileReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileReplicationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PauseFileActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weaviate.v1.FileReplicationService/PauseFileActivity',
            v1_dot_file__replication__pb2.PauseFileActivityRequest.SerializeToString,
            v1_dot_file__replication__pb2.PauseFileActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResumeFileActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weaviate.v1.FileReplicationService/ResumeFileActivity',
            v1_dot_file__replication__pb2.ResumeFileActivityRequest.SerializeToString,
            v1_dot_file__replication__pb2.ResumeFileActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weaviate.v1.FileReplicationService/ListFiles',
            v1_dot_file__replication__pb2.ListFilesRequest.SerializeToString,
            v1_dot_file__replication__pb2.ListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileMetadata(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/weaviate.v1.FileReplicationService/GetFileMetadata',
            v1_dot_file__replication__pb2.GetFileMetadataRequest.SerializeToString,
            v1_dot_file__replication__pb2.FileMetadata.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/weaviate.v1.FileReplicationService/GetFile',
            v1_dot_file__replication__pb2.GetFileRequest.SerializeToString,
            v1_dot_file__replication__pb2.FileChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
